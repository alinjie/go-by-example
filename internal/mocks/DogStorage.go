// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	v1 "github.com/alinjie/go-by-example/internal/api/v1"
	mock "github.com/stretchr/testify/mock"
)

// MockDogStorage is an autogenerated mock type for the DogStorage type
type MockDogStorage struct {
	mock.Mock
}

type MockDogStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDogStorage) EXPECT() *MockDogStorage_Expecter {
	return &MockDogStorage_Expecter{mock: &_m.Mock}
}

// GetDog provides a mock function with given fields: id
func (_m *MockDogStorage) GetDog(id int) (v1.DogDTO, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetDog")
	}

	var r0 v1.DogDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (v1.DogDTO, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) v1.DogDTO); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(v1.DogDTO)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDogStorage_GetDog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDog'
type MockDogStorage_GetDog_Call struct {
	*mock.Call
}

// GetDog is a helper method to define mock.On call
//   - id int
func (_e *MockDogStorage_Expecter) GetDog(id interface{}) *MockDogStorage_GetDog_Call {
	return &MockDogStorage_GetDog_Call{Call: _e.mock.On("GetDog", id)}
}

func (_c *MockDogStorage_GetDog_Call) Run(run func(id int)) *MockDogStorage_GetDog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockDogStorage_GetDog_Call) Return(_a0 v1.DogDTO, _a1 error) *MockDogStorage_GetDog_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDogStorage_GetDog_Call) RunAndReturn(run func(int) (v1.DogDTO, error)) *MockDogStorage_GetDog_Call {
	_c.Call.Return(run)
	return _c
}

// ListDogs provides a mock function with given fields:
func (_m *MockDogStorage) ListDogs() ([]v1.DogDTO, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListDogs")
	}

	var r0 []v1.DogDTO
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]v1.DogDTO, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []v1.DogDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.DogDTO)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDogStorage_ListDogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDogs'
type MockDogStorage_ListDogs_Call struct {
	*mock.Call
}

// ListDogs is a helper method to define mock.On call
func (_e *MockDogStorage_Expecter) ListDogs() *MockDogStorage_ListDogs_Call {
	return &MockDogStorage_ListDogs_Call{Call: _e.mock.On("ListDogs")}
}

func (_c *MockDogStorage_ListDogs_Call) Run(run func()) *MockDogStorage_ListDogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDogStorage_ListDogs_Call) Return(_a0 []v1.DogDTO, _a1 error) *MockDogStorage_ListDogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDogStorage_ListDogs_Call) RunAndReturn(run func() ([]v1.DogDTO, error)) *MockDogStorage_ListDogs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDogStorage creates a new instance of MockDogStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDogStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDogStorage {
	mock := &MockDogStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
